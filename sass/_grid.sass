// TODO: Comments!
  
!grid_width ||= 960px
!grid_cols  ||= 16
!grid_gutter_width ||= 20px

// Usually we don't care about the amount of pixel, we just want
// to express to margins in relation to the global grid's gutter
// width. So this mixin interprets the parameters as factors of
// of the gutter's width. Top and bottom are 1 as default because
// in most use cases we just want to set design elements apart.    
//
// Example:
// Set a right margin of half the gutter's width:
// +grid-margin(false, 0.5)    
//
=grid-margin(!top = 1, !right = false, !bottom = 1, !left = false)
  @if !top
    :margin-top = !grid_gutter_width * !top
  @if !right
    :margin-right = !grid_gutter_width * !right
  @if !bottom
    :margin-bottom = !grid_gutter_width * !bottom
  @if !left
    :margin-left = !grid_gutter_width * !left

// TODO: Refactor like behave similar to grid-margin
=grid-padding(!left_and_right = !grid_gutter_width, !top_and_bottom = false)
  :padding
    :left= !left_and_right
    :right= !left_and_right

  @if !top_and_bottom
    :padding
      :top= !top_and_bottom
      :bottom= !top_and_bottom

      
=grid-first-cell
  :margin-left 0

=grid-last-cell
  :margin-right 0

=grid-container
  :margin
    :left auto
    :right auto

    // Full margin due to adjacent-margin-collapsing!
    :top= !grid_gutter_width 
    :bottom= !grid_gutter_width
    
  :width= !grid_width


=grid-cell-width(!n, !adjust_by = 0)
  :width= (!grid_width / !grid_cols) * !n - !grid_gutter_width + !adjust_by

=grid-cell-base
  +float-left
  :margin
    :left= !grid_gutter_width/2
    :right= !grid_gutter_width/2

=grid-cells(!n, !adjust_by = 0)
  +grid-cell-base
  +grid-cell-width(!n, !adjust_by)
  
=grid-generate-cells
  @for !n from 1 through !grid_cols
    .cells_#{!n}
      +grid-cells(!n)

        
=grid-prefix(!n)
  :padding-left= (!grid_width / !grid_cols) * !n

=grid-generate-prefixes
  @for !n from 1 through !grid_cols - 1          
    .prefix_#{!n}
      +grid-prefix(!n)


=grid-suffix(!n)
  :padding-right= (!grid_width / !grid_cols) * !n

=grid-generate-suffixes
  @for !n from 1 through !grid_cols - 1
    .suffix_#{!n}
      +grid-suffix(!n)
      
=grid(!width = !grid_width, !cols = !grid_cols, !gutter_width = !grid_gutter_width)
  !grid_width = !width
  !grid_cols  = !cols
  !grid_gutter_width = !gutter_width

  +grid-container

  +grid-generate-cells
  +grid-generate-prefixes      
  +grid-generate-suffixes
